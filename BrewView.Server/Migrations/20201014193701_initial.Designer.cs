// <auto-generated />
using System;
using BrewView.DatabaseModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BrewView.Server.Migrations
{
    [DbContext(typeof(BrewContext))]
    [Migration("20201014193701_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BrewView.DatabaseModels.Models.Brew", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gtin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Brews");
                });

            modelBuilder.Entity("BrewView.DatabaseModels.Models.FoodAlcoholicEntity", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FoodId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId", "FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodBrews");
                });

            modelBuilder.Entity("BrewView.DatabaseModels.Models.GrapeAlcoholicEntity", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GrapeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GrapePercent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId", "GrapeId");

                    b.HasIndex("GrapeId");

                    b.ToTable("GrapeBrews");
                });

            modelBuilder.Entity("BrewView.DatabaseModels.Models.UserBrew", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DrunkCount")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBrews");
                });

            modelBuilder.Entity("BrewView.DatabaseModels.User.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BrewView.DatabaseModels.Vinmonopol.AlcoholicEntity", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId");

                    b.ToTable("AlcoholicEntities");
                });

            modelBuilder.Entity("BrewView.DatabaseModels.Vinmonopol.Food", b =>
                {
                    b.Property<string>("FoodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FoodDesc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FoodId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("BrewView.DatabaseModels.Vinmonopol.Grape", b =>
                {
                    b.Property<string>("GrapeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GrapeDesc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GrapeId");

                    b.ToTable("Grapes");
                });

            modelBuilder.Entity("BrewView.DatabaseModels.Models.FoodAlcoholicEntity", b =>
                {
                    b.HasOne("BrewView.DatabaseModels.Vinmonopol.Food", "Food")
                        .WithMany("FoodAlcoholicEntities")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrewView.DatabaseModels.Vinmonopol.AlcoholicEntity", "AlcoholicEntity")
                        .WithMany("FoodAlcoholicEntities")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BrewView.DatabaseModels.Models.GrapeAlcoholicEntity", b =>
                {
                    b.HasOne("BrewView.DatabaseModels.Vinmonopol.Grape", "Grape")
                        .WithMany("GrapeAlcoholicEntities")
                        .HasForeignKey("GrapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrewView.DatabaseModels.Vinmonopol.AlcoholicEntity", "AlcoholicEntity")
                        .WithMany("GrapeAlcoholicEntities")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BrewView.DatabaseModels.Models.UserBrew", b =>
                {
                    b.HasOne("BrewView.DatabaseModels.Models.Brew", "Brew")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrewView.DatabaseModels.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("BrewView.DatabaseModels.Models.Note", "Notes", b1 =>
                        {
                            b1.Property<string>("UserBrewProductId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("UserBrewUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int?>("NoteId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTime?>("Date")
                                .HasColumnType("datetime2");

                            b1.Property<int?>("Rating")
                                .HasColumnType("int");

                            b1.Property<string>("Text")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserBrewProductId", "UserBrewUserId", "NoteId");

                            b1.ToTable("Note");

                            b1.WithOwner("UserBrew")
                                .HasForeignKey("UserBrewProductId", "UserBrewUserId");
                        });
                });

            modelBuilder.Entity("BrewView.DatabaseModels.Vinmonopol.AlcoholicEntity", b =>
                {
                    b.OwnsOne("BrewView.DatabaseModels.Vinmonopol.Basic", "Basic", b1 =>
                        {
                            b1.Property<string>("AlcoholicEntityProductId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("AgeLimit")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double?>("AlcoholContent")
                                .HasColumnType("float");

                            b1.Property<int?>("BottlePerSalesUnit")
                                .HasColumnType("int");

                            b1.Property<string>("CorkType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CorkTypeId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("IntroductionDate")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PackagingMaterial")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PackagingMaterialId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProductLongName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProductShortName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProductStatusSaleId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProductStatusSaleName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProductStatusSaleValidFrom")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int?>("Vintage")
                                .HasColumnType("int");

                            b1.Property<string>("VolumType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("VolumTypeId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double?>("Volume")
                                .HasColumnType("float");

                            b1.HasKey("AlcoholicEntityProductId");

                            b1.ToTable("AlcoholicEntities");

                            b1.WithOwner()
                                .HasForeignKey("AlcoholicEntityProductId");
                        });

                    b.OwnsOne("BrewView.DatabaseModels.Vinmonopol.Classification", "Classification", b1 =>
                        {
                            b1.Property<string>("AlcoholicEntityProductId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("MainProductTypeId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MainProductTypeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProductGroupId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProductGroupName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProductTypeId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProductTypeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SubProductTypeId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SubProductTypeName")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AlcoholicEntityProductId");

                            b1.ToTable("AlcoholicEntities");

                            b1.WithOwner()
                                .HasForeignKey("AlcoholicEntityProductId");
                        });

                    b.OwnsOne("BrewView.DatabaseModels.Vinmonopol.Description", "Description", b1 =>
                        {
                            b1.Property<string>("AlcoholicEntityProductId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Bitterness")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Freshness")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Fullness")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Sweetness")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Tannins")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AlcoholicEntityProductId");

                            b1.ToTable("AlcoholicEntities");

                            b1.WithOwner()
                                .HasForeignKey("AlcoholicEntityProductId");

                            b1.OwnsOne("BrewView.DatabaseModels.Vinmonopol.Characteristics", "Characteristics", b2 =>
                                {
                                    b2.Property<string>("DescriptionAlcoholicEntityProductId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("Colour")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Odour")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Taste")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("DescriptionAlcoholicEntityProductId");

                                    b2.ToTable("AlcoholicEntities");

                                    b2.WithOwner()
                                        .HasForeignKey("DescriptionAlcoholicEntityProductId");
                                });
                        });

                    b.OwnsOne("BrewView.DatabaseModels.Vinmonopol.Ingredients", "Ingredients", b1 =>
                        {
                            b1.Property<string>("AlcoholicEntityProductId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Acid")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid?>("IngredientsId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Sugar")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AlcoholicEntityProductId");

                            b1.ToTable("AlcoholicEntities");

                            b1.WithOwner()
                                .HasForeignKey("AlcoholicEntityProductId");
                        });

                    b.OwnsOne("BrewView.DatabaseModels.Vinmonopol.LastChanged", "LastChanged", b1 =>
                        {
                            b1.Property<string>("AlcoholicEntityProductId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Time")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AlcoholicEntityProductId");

                            b1.ToTable("AlcoholicEntities");

                            b1.WithOwner()
                                .HasForeignKey("AlcoholicEntityProductId");
                        });

                    b.OwnsOne("BrewView.DatabaseModels.Vinmonopol.Logistics", "Logistics", b1 =>
                        {
                            b1.Property<string>("AlcoholicEntityProductId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("ManufacturerId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ManufacturerName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double?>("MinimumOrderQuantity")
                                .HasColumnType("float");

                            b1.Property<string>("OrderPack")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double?>("PackagingWeight")
                                .HasColumnType("float");

                            b1.Property<string>("VendorId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("VendorName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("VendorValidFrom")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("WholesalerId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("WholesalerName")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AlcoholicEntityProductId");

                            b1.ToTable("AlcoholicEntities");

                            b1.WithOwner()
                                .HasForeignKey("AlcoholicEntityProductId");
                        });

                    b.OwnsOne("BrewView.DatabaseModels.Vinmonopol.Origins", "Origins", b1 =>
                        {
                            b1.Property<string>("AlcoholicEntityProductId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LocalQualityClassif")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LocalQualityClassifId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid?>("OriginsId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("AlcoholicEntityProductId");

                            b1.ToTable("AlcoholicEntities");

                            b1.WithOwner()
                                .HasForeignKey("AlcoholicEntityProductId");

                            b1.OwnsOne("BrewView.DatabaseModels.Vinmonopol.Origin", "Origin", b2 =>
                                {
                                    b2.Property<string>("OriginsAlcoholicEntityProductId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("Country")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CountryId")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Region")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("RegionId")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SubRegion")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SubRegionId")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OriginsAlcoholicEntityProductId");

                                    b2.ToTable("AlcoholicEntities");

                                    b2.WithOwner()
                                        .HasForeignKey("OriginsAlcoholicEntityProductId");
                                });

                            b1.OwnsOne("BrewView.DatabaseModels.Vinmonopol.Production", "Production", b2 =>
                                {
                                    b2.Property<string>("OriginsAlcoholicEntityProductId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("Country")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CountryId")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Region")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("RegionId")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OriginsAlcoholicEntityProductId");

                                    b2.ToTable("AlcoholicEntities");

                                    b2.WithOwner()
                                        .HasForeignKey("OriginsAlcoholicEntityProductId");
                                });
                        });

                    b.OwnsMany("BrewView.DatabaseModels.Vinmonopol.Price", "Prices", b1 =>
                        {
                            b1.Property<string>("AlcoholicEntityProductId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<Guid?>("PriceId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double?>("BottleReturnValue")
                                .HasColumnType("float");

                            b1.Property<string>("PriceValidFrom")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double?>("SalesPrice")
                                .HasColumnType("float");

                            b1.Property<double?>("SalesPricePrLiter")
                                .HasColumnType("float");

                            b1.HasKey("AlcoholicEntityProductId", "PriceId");

                            b1.ToTable("Price");

                            b1.WithOwner("AlcoholicEntity")
                                .HasForeignKey("AlcoholicEntityProductId");
                        });

                    b.OwnsOne("BrewView.DatabaseModels.Vinmonopol.Properties", "Properties", b1 =>
                        {
                            b1.Property<string>("AlcoholicEntityProductId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<bool>("Biodynamic")
                                .HasColumnType("bit");

                            b1.Property<string>("EcoLabelling")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EcoLabellingId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("EnvironmentallySmart")
                                .HasColumnType("bit");

                            b1.Property<bool>("EthicallyCertified")
                                .HasColumnType("bit");

                            b1.Property<bool>("FreeOrLowOnGluten")
                                .HasColumnType("bit");

                            b1.Property<bool>("Kosher")
                                .HasColumnType("bit");

                            b1.Property<bool>("LocallyProduced")
                                .HasColumnType("bit");

                            b1.Property<bool>("NoAddedSulphur")
                                .HasColumnType("bit");

                            b1.Property<bool>("Organic")
                                .HasColumnType("bit");

                            b1.Property<string>("ProductionMethodStorage")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("StoragePotential")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("StoragePotentialId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("SweetWine")
                                .HasColumnType("bit");

                            b1.Property<bool>("VintageControlled")
                                .HasColumnType("bit");

                            b1.HasKey("AlcoholicEntityProductId");

                            b1.ToTable("AlcoholicEntities");

                            b1.WithOwner()
                                .HasForeignKey("AlcoholicEntityProductId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
